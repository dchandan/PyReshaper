#!/usr/bin/env python
'''
This script provides the command-line interface (CLI) to the pyReshaper
Python package for time slice-to-series operation.

This script uses the optparse module, which has been deprecated since
Python version 2.7 with the introduction of the argparse module, which is
more flexible and capable.  However, since the PyReshaper module needs to
work on systems with only Python 2.6 available, we use the optparse module.

__________________________
Created on Apr 30, 2014

@author: Kevin Paul <kpaul@ucar.edu>
'''

import sys
import optparse
import glob
from pyreshaper import specification
from pyreshaper import reshaper

# CLI Interface
parser = optparse.OptionParser()
parser.add_option('-g', '--input_glob', action='append',
                  help='Glob string to which all input files must match.  '
                       'Multiple glob arguments may be given, and the files '
                       'matching each glob are added to the list of input '
                       'files used by the Reshaper.  There must be at least '
                       'one glob string spespecified.  The glob should be for '
                       'an absolute file path.')
parser.add_option('-f', '--netcdf_format', default='netcdf4c',
                  choices=['netcdf', 'netcdf4', 'netcdf4c'],
                  help='NetCDF file format to be used for all output files. ')
parser.add_option('-p', '--output_prefix', default='tseries.',
                  help='String prefix for all output files.  The output file '
                       'will be named according to the rule: '
                       'output_prefix + variable_name + output_suffix')
parser.add_option('-s', '--output_suffix', default='.nc',
                  help='String suffix for all output files.  The output file '
                       'will be named according to the rule: '
                       'output_prefix + variable_name + output_suffix')
parser.add_option('-m', '--metadata', action='append',
                  help='Names of a variable to be included in all output '
                       'files.  There may be more than one --metadata (-m) '
                       'option given, and each one is appended to a list.')
parser.add_option('--serial', default=False,
                  action='store_true', dest='serial',
                  help='Whether to run in serial or parallel.')
parser.add_option('-d', '--debug', default=1, type='int',
                  help='Level of debug output when running.  The default is '
                       '1, which is a reasonable amount of debug output for '
                       'a parallel run.  A value of 0 indicates no output, '
                       'and a higher level indicates more detailed output.')
parser.add_option('-l', '--limit', default=0, type='int',
                  help='The limit on the number of time-series files per '
                       'processor to write.  If specified, it enables '
                       'debugging.')

# Parse the CLI options and assemble the Reshaper inputs
(options, arguments) = parser.parse_args()

# Generate list of input files
if (len(options.input_glob) == 0):
    print 'ERROR:  There must be at least one glob string ' + \
          '(-g, --input_glob) present'
    sys.exit(1)
input_file_list = []
for glob_str in options.input_glob:
    glob_list = glob.glob(glob_str)
    input_file_list.extend(glob_list)

# Create the input object for the Reshaper
spec = specification.create_specifier()

# Add input to the specifier
spec.input_file_list = input_file_list
spec.netcdf_format = options.netcdf_format
spec.output_file_prefix = options.output_prefix
spec.output_file_suffix = options.output_suffix
spec.time_variant_metadata = options.metadata

# Create the PyReshaper object
reshpr = reshaper.Reshaper([spec], serial=options.serial, debug=options.debug)

# Run the convertion (slice-to-series) process
reshpr.convert()

# Print timing diagnostics
reshpr.print_diagnostics()
