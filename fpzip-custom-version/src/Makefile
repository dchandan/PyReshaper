# compile-time options --------------------------------------------------------

# optimize for speed; may impact correctness and portability
FPZIP_FP = FPZIP_FP_FAST

# use volatile accumulator
#FPZIP_FP = FPZIP_FP_SAFE

# emulate floating-point arithmetic
#FPZIP_FP = FPZIP_FP_EMUL

# reinterpret floating-point numbers as integers; most portable
#FPZIP_FP = FPZIP_FP_INT

# output buffer size (ideally the disk block size)
FPZIP_BLOCK_SIZE = 0x1000

# bitwise type conversion mechanisms (defaults to memcpy)
#FPZIP_CONV = -DWITH_REINTERPRET_CAST
FPZIP_CONV = -DWITH_UNION


# no changes should be necessary below ----------------------------------------

CXX = g++
CXXFLAGS += -ansi -Wall -g -shared
CXXFLAGS += -O2
PYTHONFLAGS =-I/glade/apps/opt/python/2.7.5/gnu-westmere/4.7.2/include/python2.7/ -I/glade/apps/opt/python/2.7.5/gnu-westmere/4.7.2/lib/python2.7/config 
PYTHONLIB=-L/glade/apps/opt/python/2.7.5/gnu-westmere/4.7.2/lib/ 
DEFS += -DFPZIP_BLOCK_SIZE=$(FPZIP_BLOCK_SIZE) -DFPZIP_FP=$(FPZIP_FP) -DFPZIP_VERBOSE=$(FPZIP_VERBOSE) $(FPZIP_CONV)

CXX_FILES =	rcdecoder.cpp\
		rcencoder.cpp\
		rcqsmodel.cpp\
		read.cpp\
		write.cpp
O_FILES = $(CXX_FILES:.cpp=.o)

../lib/libfpzip.so: $(O_FILES)
	@rm -f $@
	$(CXX) $(CXXFLAGS)  -o $@ $^
.cpp.o:
	$(CXX) $(CXXFLAGS) $(DEFS) -fPIC -I../inc -c $<

clean:
	@rm -f $(O_FILES) 
